// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  fullName  String
  password  String?  // Optional for OTP-only users
  phone     String?
  age       Int
  weight    Float
  gender    Gender
  goal      FitnessGoal
  authMethod AuthMethod
  isVerified Boolean  @default(false)
  stripeCustomerId String? @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sessions    Session[]
  workouts    Workout[]
  meals       Meal[]
  progress    Progress[]
  subscription Subscription?
  nutritionGoals NutritionGoal?
  userAchievements UserAchievement[]
  goals       Goal[]
  
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

// Exercise Management
model Exercise {
  id           String   @id @default(cuid())
  name         String
  description  String?
  category     ExerciseCategory
  muscleGroups String[]
  equipment    String[]
  difficulty   Difficulty
  instructions String[]
  tips         String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@map("exercises")
}

model WorkoutTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  duration    Int      // minutes
  difficulty  Difficulty
  category    WorkoutCategory
  exercises   Json     // Array of exercise objects with sets, reps, etc.
  totalCalories Int
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("workout_templates")
}

model Workout {
  id               String   @id @default(cuid())
  userId           String
  workoutTemplateId String?
  workoutName      String
  duration         Int      // actual duration in minutes
  exercises        Json     // Array of logged exercises with actual sets/reps
  totalCalories    Int
  notes            String?
  rating           Int?     // 1-5 stars
  date             DateTime @default(now())
  createdAt        DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("workouts")
}

// Meal & Nutrition Management
model MealTemplate {
  id           String   @id @default(cuid())
  name         String
  description  String?
  category     MealCategory
  prepTime     Int      // minutes
  servings     Int
  nutrition    Json     // Nutrition object with calories, protein, etc.
  ingredients  Json     // Array of ingredient objects
  instructions String[]
  tags         String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@map("meal_templates")
}

model Meal {
  id             String   @id @default(cuid())
  userId         String
  mealType       MealCategory
  mealTemplateId String?
  mealName       String
  servings       Float    @default(1)
  nutrition      Json     // Nutrition object
  notes          String?
  date           DateTime @default(now())
  createdAt      DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("meals")
}

model NutritionGoal {
  id            String   @id @default(cuid())
  userId        String   @unique
  dailyCalories Int
  dailyProtein  Float
  dailyCarbs    Float
  dailyFat      Float
  dailyFiber    Float
  waterGoal     Float?   // liters
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("nutrition_goals")
}

// Progress Tracking
model Progress {
  id           String   @id @default(cuid())
  userId       String
  type         ProgressType
  date         DateTime @default(now())
  weight       Float?
  bodyFat      Float?
  muscleMass   Float?
  measurements Json?    // Object with body measurements
  photos       Json?    // Object with photo URLs
  notes        String?
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("progress")
}

// Achievement System
model Achievement {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String?
  category    AchievementCategory
  requirement Json     // Object with type, value, metric
  points      Int      @default(10)
  createdAt   DateTime @default(now())

  userAchievements UserAchievement[]
  
  @@map("achievements")
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
  @@map("user_achievements")
}

// Goals System
model Goal {
  id           String   @id @default(cuid())
  userId       String
  type         GoalType
  title        String
  description  String?
  targetValue  Float?
  currentValue Float?
  unit         String?
  targetDate   DateTime?
  isCompleted  Boolean  @default(false)
  priority     Priority @default(medium)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("goals")
}

// Subscription & Payment
model SubscriptionPlan {
  id              String   @id @default(cuid())
  name            String
  description     String?
  price           Float
  currency        String   @default("KWD")
  interval        SubscriptionInterval
  intervalCount   Int      @default(1)
  features        String[]
  isPopular       Boolean  @default(false)
  isActive        Boolean  @default(true)
  stripeProductId String?
  stripePriceId   String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  subscriptions Subscription[]
  
  @@map("subscription_plans")
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String   @unique
  planId               String
  stripeSubscriptionId String   @unique
  stripeCustomerId     String
  status               SubscriptionStatus
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean  @default(false)
  cancelledAt          DateTime?
  lastPaymentAt        DateTime?
  billingAddress       Json?    // Billing address object
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan SubscriptionPlan @relation(fields: [planId], references: [id])
  
  @@map("subscriptions")
}

// Enums
enum Gender {
  male
  female
  other
}

enum FitnessGoal {
  lose_weight   @map("lose-weight")
  gain_muscle   @map("gain-muscle")
  maintain      @map("maintain")
  improve_endurance @map("improve-endurance")
  increase_strength @map("increase-strength")
}

enum AuthMethod {
  email
  otp
}

enum ExerciseCategory {
  strength
  cardio
  flexibility
  sports
}

enum WorkoutCategory {
  strength
  cardio
  flexibility
  hiit
  sports
}

enum MealCategory {
  breakfast
  lunch
  dinner
  snack
}

enum Difficulty {
  beginner
  intermediate
  advanced
}

enum ProgressType {
  body_metrics
  performance
  photo
}

enum AchievementCategory {
  workout
  nutrition
  consistency
  milestone
}

enum GoalType {
  weight_loss
  weight_gain
  muscle_gain
  strength
  endurance
  custom
}

enum Priority {
  low
  medium
  high
}

enum SubscriptionInterval {
  month
  quarter
  year
}

enum SubscriptionStatus {
  pending
  active
  past_due
  cancelled
  paused
}
